//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

#pragma once


// CArrayMemberVisualizerContract is an abstract class which defines the contract (set
// of interfaces which should be implemented) for CArrayMemberVisualizer.
// CArrayMemberVisualizer should inherit from this class. The properties of this class
// come from 'ArrayMemberVisualizer.vsdconfigxml'.
class DECLSPEC_NOVTABLE CArrayMemberVisualizerContract :
    public ::Microsoft::VisualStudio::Debugger::ComponentInterfaces::IDkmCustomVisualizer
{
public:
    typedef CArrayMemberVisualizerContract Contract;
    static const CLSID ClassId;

// IUnknown methods
public:
    virtual HRESULT STDMETHODCALLTYPE QueryInterface(
        REFIID riid,
        __RPC__deref_out void __RPC_FAR *__RPC_FAR *ppvObject
        )
    {
        return _InternalQueryInterface(riid, ppvObject);
    }
    // AddRef and Release are left abstract.
    virtual ULONG STDMETHODCALLTYPE AddRef(void) = 0;
    virtual ULONG STDMETHODCALLTYPE Release(void) = 0;

protected:
    HRESULT STDMETHODCALLTYPE _InternalQueryInterface(
        REFIID riid,
        __RPC__deref_out void __RPC_FAR *__RPC_FAR *ppvObject
        )
    {
        if (ppvObject == NULL)
            return E_POINTER;

        static const IID ImplementedInterfaces[] =
        {
            { 0xf00e7f6d, 0xfc66, 0xd9a9, { 0xe3, 0xe5, 0x83, 0xb3, 0x2a, 0xa, 0x97, 0x55 } } // IDkmCustomVisualizer
        };

        int index = FindImplementedInterface(riid, ImplementedInterfaces, sizeof(ImplementedInterfaces)/sizeof(IID));
        if (index >= 0)
        {
            *ppvObject = reinterpret_cast<size_t*>(this)+index;
            AddRef();
            return S_OK;
        }

        *ppvObject = NULL;
        return E_NOINTERFACE;
    }

private:
    // Returns the index within an array of IIDs (GUIDs) for the input search key.
    // -1 is returned if the key is not found.
    static int FindImplementedInterface(
        REFIID key, 
        _In_count_(interfaceCount) const IID implementedInterfaces[],
        int interfaceCount
        )
    {
        if (InlineIsEqualGUID(key, __uuidof(IUnknown)))
            return 0;

        for (int c = 0; c < interfaceCount; c++)
        {
            if (InlineIsEqualGUID(key, implementedInterfaces[c]))
                return c;
        }

        return -1;
    }
};
__declspec(selectany) const CLSID CArrayMemberVisualizerContract::ClassId =
{ 0xbde276d, 0x405d, 0x48a6, { 0xb2, 0x54, 0x15, 0xc2, 0xd, 0x98, 0x55, 0xdb } };
